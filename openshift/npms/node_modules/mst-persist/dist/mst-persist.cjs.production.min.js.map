{"version":3,"file":"mst-persist.cjs.production.min.js","sources":["../src/asyncLocalStorage.ts","../src/index.ts"],"sourcesContent":["// using istanbul ignore on portions of code that are not currently used internally\n\ninterface IAsyncLocalStorage {\n  clear(): Promise<void>\n  getItem(key: string): Promise<string>\n  removeItem(key: string): Promise<void>\n  setItem(key: string, value: string): Promise<void>\n}\n\nexport const AsyncLocalStorage: IAsyncLocalStorage = {\n  // must use wrapper functions when passing localStorage functions (https://github.com/agilgur5/mst-persist/issues/18)\n  clear /* istanbul ignore next */ () {\n    return callWithPromise(() => window.localStorage.clear())\n  },\n  getItem (key) {\n    return callWithPromise(() => window.localStorage.getItem(key))\n  },\n  removeItem /* istanbul ignore next */ (key) {\n    return callWithPromise(() => window.localStorage.removeItem(key))\n  },\n  setItem (key, value) {\n    return callWithPromise(() => window.localStorage.setItem(key, value))\n  }\n}\n\nfunction callWithPromise (func: Function, ...args: any[]): Promise<any> {\n  try {\n    return Promise.resolve(func(...args))\n  } catch (err) {\n    /* istanbul ignore next */\n    return Promise.reject(err)\n  }\n}\n\nexport default AsyncLocalStorage\n","import { onSnapshot, applySnapshot, IStateTreeNode } from 'mobx-state-tree'\n\nimport AsyncLocalStorage from './asyncLocalStorage'\n\nexport interface IArgs {\n  (name: string, store: IStateTreeNode, options?: IOptions): Promise<void>\n}\nexport interface IOptions {\n  storage?: any,\n  jsonify?: boolean,\n  readonly whitelist?: Array<string>,\n  readonly blacklist?: Array<string>\n}\ntype StrToAnyMap = {[key: string]: any}\n\nexport const persist: IArgs = (name, store, options = {}) => {\n  let {storage, jsonify = true, whitelist, blacklist} = options\n\n  // use AsyncLocalStorage by default (or if localStorage was passed in)\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.localStorage !== 'undefined' &&\n    (!storage || storage === window.localStorage)\n  ) {\n    storage = AsyncLocalStorage\n  }\n  if (!storage) {\n    return Promise.reject('localStorage (the default storage engine) is not ' +\n      'supported in this environment. Please configure a different storage ' +\n      'engine via the `storage:` option.')\n  }\n\n  const whitelistDict = arrToDict(whitelist)\n  const blacklistDict = arrToDict(blacklist)\n\n  onSnapshot(store, (_snapshot: StrToAnyMap) => {\n    // need to shallow clone as otherwise properties are non-configurable (https://github.com/agilgur5/mst-persist/pull/21#discussion_r348105595)\n    const snapshot = { ..._snapshot }\n    Object.keys(snapshot).forEach((key) => {\n      if (whitelist && !whitelistDict[key]) {\n        delete snapshot[key]\n      }\n      if (blacklist && blacklistDict[key]) {\n        delete snapshot[key]\n      }\n    })\n\n    const data = !jsonify ? snapshot : JSON.stringify(snapshot)\n    storage.setItem(name, data)\n  })\n\n  return storage.getItem(name)\n    .then((data: object | string) => {\n      const snapshot = !isString(data) ? data : JSON.parse(data)\n      // don't apply falsey (which will error), leave store in initial state\n      if (!snapshot) { return }\n      applySnapshot(store, snapshot)\n    })\n}\n\ntype StrToBoolMap = {[key: string]: boolean}\n\nfunction arrToDict (arr?: Array<string>): StrToBoolMap {\n  if (!arr) { return {} }\n  return arr.reduce((dict: StrToBoolMap, elem) => {\n    dict[elem] = true\n    return dict\n  }, {})\n}\n\nfunction isString (value: any): value is string {\n  return typeof value === 'string'\n}\n\nexport default persist\n"],"names":["AsyncLocalStorage","clear","callWithPromise","window","localStorage","getItem","key","removeItem","setItem","value","func","args","Promise","resolve","err","reject","persist","name","store","options","storage","jsonify","whitelist","blacklist","whitelistDict","arrToDict","blacklistDict","onSnapshot","_snapshot","snapshot","Object","keys","forEach","data","JSON","stringify","then","parse","applySnapshot","arr","reduce","dict","elem"],"mappings":"oTASA,IAAaA,EAAwC,CAEnDC,wBACSC,GAAgB,kBAAMC,OAAOC,aAAaH,YAEnDI,iBAASC,UACAJ,GAAgB,kBAAMC,OAAOC,aAAaC,QAAQC,OAE3DC,oBAAuCD,UAC9BJ,GAAgB,kBAAMC,OAAOC,aAAaG,WAAWD,OAE9DE,iBAASF,EAAKG,UACLP,GAAgB,kBAAMC,OAAOC,aAAaI,QAAQF,EAAKG,QAIlE,SAASP,EAAiBQ,kCAAmBC,mCAAAA,2BAElCC,QAAQC,QAAQH,eAAQC,IAC/B,MAAOG,UAEAF,QAAQG,OAAOD,QCfbE,EAAiB,SAACC,EAAMC,EAAOC,YAAAA,IAAAA,EAAU,QAC/CC,EAAiDD,EAAjDC,UAAiDD,EAAxCE,QAAAA,gBAAgBC,EAAwBH,EAAxBG,UAAWC,EAAaJ,EAAbI,aAIrB,oBAAXpB,aACwB,IAAxBA,OAAOC,cACZgB,GAAWA,IAAYjB,OAAOC,eAEhCgB,EAAUpB,IAEPoB,SACIR,QAAQG,OAAO,8JAKlBS,EAAgBC,EAAUH,GAC1BI,EAAgBD,EAAUF,UAEhCI,aAAWT,GAAO,SAACU,OAEXC,OAAgBD,GACtBE,OAAOC,KAAKF,GAAUG,SAAQ,SAAC1B,GACzBgB,IAAcE,EAAclB,WACvBuB,EAASvB,GAEdiB,GAAaG,EAAcpB,WACtBuB,EAASvB,UAId2B,EAAQZ,EAAqBa,KAAKC,UAAUN,GAA1BA,EACxBT,EAAQZ,QAAQS,EAAMgB,MAGjBb,EAAQf,QAAQY,GACpBmB,MAAK,SAACH,OACCJ,EAkBc,iBAlBOI,EAAQA,EAAOC,KAAKG,MAAMJ,GAEhDJ,GACLS,gBAAcpB,EAAOW,OAM3B,SAASJ,EAAWc,UACbA,EACEA,EAAIC,QAAO,SAACC,EAAoBC,UACrCD,EAAKC,IAAQ,EACND,IACN,IAJgB"}